// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: sso/sso.proto

package ssov1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthorizationClient is the client API for Authorization service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthorizationClient interface {
	SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error)
	SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error)
}

type authorizationClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorizationClient(cc grpc.ClientConnInterface) AuthorizationClient {
	return &authorizationClient{cc}
}

func (c *authorizationClient) SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error) {
	out := new(SignUpResponse)
	err := c.cc.Invoke(ctx, "/auth.Authorization/SignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error) {
	out := new(SignInResponse)
	err := c.cc.Invoke(ctx, "/auth.Authorization/SignIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorizationServer is the server API for Authorization service.
// All implementations must embed UnimplementedAuthorizationServer
// for forward compatibility
type AuthorizationServer interface {
	SignUp(context.Context, *SignUpRequest) (*SignUpResponse, error)
	SignIn(context.Context, *SignInRequest) (*SignInResponse, error)
	mustEmbedUnimplementedAuthorizationServer()
}

// UnimplementedAuthorizationServer must be embedded to have forward compatible implementations.
type UnimplementedAuthorizationServer struct {
}

func (UnimplementedAuthorizationServer) SignUp(context.Context, *SignUpRequest) (*SignUpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (UnimplementedAuthorizationServer) SignIn(context.Context, *SignInRequest) (*SignInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedAuthorizationServer) mustEmbedUnimplementedAuthorizationServer() {}

// UnsafeAuthorizationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorizationServer will
// result in compilation errors.
type UnsafeAuthorizationServer interface {
	mustEmbedUnimplementedAuthorizationServer()
}

func RegisterAuthorizationServer(s grpc.ServiceRegistrar, srv AuthorizationServer) {
	s.RegisterService(&Authorization_ServiceDesc, srv)
}

func _Authorization_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Authorization/SignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).SignUp(ctx, req.(*SignUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Authorization/SignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).SignIn(ctx, req.(*SignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Authorization_ServiceDesc is the grpc.ServiceDesc for Authorization service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Authorization_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.Authorization",
	HandlerType: (*AuthorizationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignUp",
			Handler:    _Authorization_SignUp_Handler,
		},
		{
			MethodName: "SignIn",
			Handler:    _Authorization_SignIn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sso/sso.proto",
}

// TwitListClient is the client API for TwitList service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TwitListClient interface {
	CreateTwit(ctx context.Context, in *CreateTwitRequest, opts ...grpc.CallOption) (*Message, error)
	GetTwit(ctx context.Context, in *GetTwitRequest, opts ...grpc.CallOption) (*Message, error)
	DeleteTwit(ctx context.Context, in *DeleteTwitRequest, opts ...grpc.CallOption) (*Message, error)
}

type twitListClient struct {
	cc grpc.ClientConnInterface
}

func NewTwitListClient(cc grpc.ClientConnInterface) TwitListClient {
	return &twitListClient{cc}
}

func (c *twitListClient) CreateTwit(ctx context.Context, in *CreateTwitRequest, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/auth.TwitList/CreateTwit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitListClient) GetTwit(ctx context.Context, in *GetTwitRequest, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/auth.TwitList/GetTwit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitListClient) DeleteTwit(ctx context.Context, in *DeleteTwitRequest, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/auth.TwitList/DeleteTwit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TwitListServer is the server API for TwitList service.
// All implementations must embed UnimplementedTwitListServer
// for forward compatibility
type TwitListServer interface {
	CreateTwit(context.Context, *CreateTwitRequest) (*Message, error)
	GetTwit(context.Context, *GetTwitRequest) (*Message, error)
	DeleteTwit(context.Context, *DeleteTwitRequest) (*Message, error)
	mustEmbedUnimplementedTwitListServer()
}

// UnimplementedTwitListServer must be embedded to have forward compatible implementations.
type UnimplementedTwitListServer struct {
}

func (UnimplementedTwitListServer) CreateTwit(context.Context, *CreateTwitRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTwit not implemented")
}
func (UnimplementedTwitListServer) GetTwit(context.Context, *GetTwitRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTwit not implemented")
}
func (UnimplementedTwitListServer) DeleteTwit(context.Context, *DeleteTwitRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTwit not implemented")
}
func (UnimplementedTwitListServer) mustEmbedUnimplementedTwitListServer() {}

// UnsafeTwitListServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TwitListServer will
// result in compilation errors.
type UnsafeTwitListServer interface {
	mustEmbedUnimplementedTwitListServer()
}

func RegisterTwitListServer(s grpc.ServiceRegistrar, srv TwitListServer) {
	s.RegisterService(&TwitList_ServiceDesc, srv)
}

func _TwitList_CreateTwit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTwitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitListServer).CreateTwit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.TwitList/CreateTwit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitListServer).CreateTwit(ctx, req.(*CreateTwitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitList_GetTwit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTwitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitListServer).GetTwit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.TwitList/GetTwit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitListServer).GetTwit(ctx, req.(*GetTwitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitList_DeleteTwit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTwitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitListServer).DeleteTwit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.TwitList/DeleteTwit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitListServer).DeleteTwit(ctx, req.(*DeleteTwitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TwitList_ServiceDesc is the grpc.ServiceDesc for TwitList service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TwitList_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.TwitList",
	HandlerType: (*TwitListServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTwit",
			Handler:    _TwitList_CreateTwit_Handler,
		},
		{
			MethodName: "GetTwit",
			Handler:    _TwitList_GetTwit_Handler,
		},
		{
			MethodName: "DeleteTwit",
			Handler:    _TwitList_DeleteTwit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sso/sso.proto",
}
